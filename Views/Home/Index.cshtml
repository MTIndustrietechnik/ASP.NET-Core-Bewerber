@using Bewerber.Models
@using GleamTech.AspNet.Core
@using GleamTech.FileUltimate.AspNet.UI


<script>
    DevExpress.localization.locale("de");
</script>

<h2 class="content-block">Startseite</h2>
    test
<style>

    .dx-texteditor.dx-editor-underlined::after {
        border: 1px solid rgba(77, 43, 43, 0.42)
    }

    .dx-texteditor-container {
        border: 1px solid rgba(77, 43, 43, 0.42)
    }

    .dx-texteditor.dx-editor-underlined .dx-texteditor-input {
        padding: 2px 4px 2px;
    }

    .dx-field-item-label-location-top {
        display: block;
        padding: 1px 1px 1px;
    }

    .dx-form-group-caption {
        font-size: 18px;
    }

    .table1 {
        margin-left: 3%;
    }

    .test {
        width: 100px;
    }

    .test1 {
        width: 70px;
    }

    .test2 {
        width: 40px;
    }

    .explorer {
        width: 50%;
        float: right;
    }

    .employeeInfo {
        width: 50%;
        float: left;
    }
</style>

@(Html.DevExtreme().Button()
                        .Text(ButtonStylingMode.Contained.ToString())
                        .Type(ButtonType.Normal)
                        .StylingMode(ButtonStylingMode.Contained)
                        .Width(120)



                    )
@(


Html.DevExtreme().DataGrid<Bewerber.Models.BewerberModelV2>
    ()
    .Selection(s => s.Mode(SelectionMode.Single))
    .HoverStateEnabled(true)
    .DataSource(ds => ds.Mvc()
    .Controller("BewerberModelV2")
    .LoadAction("Get")
    .InsertAction("Post")
    .UpdateAction("Put")
    .DeleteAction("Delete")
    .Key("BEW_ID")
    )


.SearchPanel(searchPanel => searchPanel
    .Visible(true)
    .Width(240)
    .Placeholder("Search...")
)
.AllowColumnResizing(true)
.ColumnAutoWidth(true)
.ShowBorders(true)
.FilterPanel(f => f.Visible(true))
.FilterRow(filterRow => filterRow
    .Visible(true)
    .ApplyFilter(GridApplyFilterMode.Auto)

)

.Export(e => e.Enabled(true).AllowExportSelectedData(true))
.Editing(editing =>
{
    editing.Mode(GridEditMode.Popup);
    editing.AllowAdding(false);
    editing.AllowDeleting(true);
    editing.AllowUpdating(true)
                .Popup(p => p
                    .Title("Information")
                    .ShowTitle(true)
                    .Width(1400)
                    .Height(1000)
                    .Position(pos => pos
                        .My(HorizontalAlignment.Center, VerticalAlignment.Top)
                        .At(HorizontalAlignment.Center, VerticalAlignment.Top)
                        .Of(new JS("window"))
                    )

                )

            .Form(f => f



                .Items(items =>
                {


                    items.AddGroup()

                        .ColCount(3)
                        .ColSpan(4)
                        .Caption("Bewerber Stammblatt")
                        .Items(groupItems =>
                        {

                            groupItems.AddSimpleFor(m => m.BEW_VNAME);
                            groupItems.AddSimpleFor(m => m.BEW_VNAME);
                            groupItems.AddSimpleFor(m => m.BEW_VNAME);
                            groupItems.AddSimpleFor(m => m.BEW_VNAME);
                            groupItems.AddSimpleFor(m => m.BEW_VNAME);
                            groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        });

                    items.AddGroup()
                        .Caption("Beruf")
                        .ColCount(2)
                        .ColSpan(2)
                        .Items(groupItems =>
                        {
                            groupItems.AddSimpleFor(m => m.BEW_VNAME)
                            ;
                            groupItems.AddSimpleFor(m => m.BEW_VNAME);

                        });

                    items.AddGroup()
                    .Caption("Netzwerk")
                    .ColCount(3)
                    .ColSpan(3)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);

                    });

                    items.AddGroup()
                    .Caption("Aktion")
                    .ColCount(3)
                    .ColSpan(3)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                    });

                    items.AddGroup()
                    .Caption("Anmerkungen")
                    .ColCount(1)
                    .ColSpan(1)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.BEW_VNAME)
                                                    .ColSpan(2)
                            .Editor(editor => editor.TextArea().Height(100));

                    });


                    items.AddGroup()
                    .Caption("Vorstellungsgespräch")
                    .ColCount(4)
                    .ColSpan(4)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                    });


                    items.AddGroup()
                    .Caption("Einstellung")
                    .ColCount(4)
                    .ColSpan(4)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.BEW_VNAME)
                        .DataField("Vorstellung");
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                    });


                    items.AddGroup()
                    .ColCount(3)
                    .ColSpan(3)
                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);

                    });

                    items.AddGroup()
                    .Caption("Anlagen")
                    .ColCount(3)
                    .ColSpan(3)

                    .Items(groupItems =>
                    {
                        groupItems.AddSimpleFor(m => m.BEW_VNAME);


                    });



                }))
                ;

}

    )
.ShowColumnLines(true)
.ShowRowLines(true)
.RowAlternationEnabled(true)
.ShowBorders(true)
.RemoteOperations(true)
.Columns(columns =>
{

    columns.AddFor(m => m.BEW_ID)
    .Caption("ID").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.BEW_DATUM).DataType(GridColumnDataType.Date)
    .Caption("Erstellt").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.BEW_NL)
    .Caption("NL").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.BEW_VNAME)
    .Caption("Vorname").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.BEW_NNAME)
    .Caption("Nachname").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.BEW_BERUF)
    .Caption("Beruf").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.BEW_BGRUPPE)
    .Caption("Berufsgruppe")
    .Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.BEW_NETZWERK)
    .Caption("Netzwerk").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.BEW_STATUS)
    .Caption("Status").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.VOR_DATUM).DataType(GridColumnDataType.Date)
    .Caption("Vorstellung").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.VOR_ERFOL)
    .Caption("Erfolgt").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.EIN_DATUM).DataType(GridColumnDataType.Date)
    .Caption("Eingestellt").Alignment(HorizontalAlignment.Center);

    columns.AddFor(m => m.BEW_REFMAIL)
    .Alignment(HorizontalAlignment.Center)
    .Visible(false);

    columns.AddFor(m => m.BEW_BEARBEITER)
    .Caption("Bearbeiter").Alignment(HorizontalAlignment.Center);
})
.OnSelectionChanged("selection_changed")

)





<div class="employeeInfo">

    <table class="table1" ;">
        <tr>
            <td class="test1">Vorname:</td>
            <td class="test"><p class="BEW_VNAME"></p></td>
            <td class="test2">&nbsp;</td>
            <td class="test1">Berufsgruppe:</td>
            <td class="test"><p class="Berufsgruppe"></p></td>
        </tr>
        <tr>
            <td class="test1">Nachname:</td>
            <td class="test"><p class="BEW_NNAME"></p></td>
            <td class="test2">&nbsp;</td>
            <td class="test1">Berufdetail:</td>
            <td class="test"><p class="Berufdetail"></p></td>
        </tr>
        <tr>
            <td class="test1">Niederlassung:</td>
            <td class="test"><p class="NL"></p></td>
            <td class="test2">&nbsp;</td>
        </tr>
        <tr>
            <td class="test1">Anhang:</td>
            <td class="test"><p class="NL"></p></td>
            <td class="test2">&nbsp;</td>
        </tr>

    </table>

    <table>
        <tr>
            <th>File Name</th>

        </tr>
        @foreach (FileModel file in Model)
        {
            <tr>
                <td>@file.FileName</td>
                <td><a href="/Home/DownloadFile?filename=@file.FileName">Download</a></td>
            </tr>
        }

    </table>



</div>



<script>
    function selection_changed(selectedItems) {
        var data = selectedItems.selectedRowsData[0];
        if (data) {
            $(".BEW_VNAME").text(data.BEW_VNAME);
            $(".Berufsgruppe").text(data.Berufsgruppe);
            $(".Berufdetail").text(data.Berufdetail);
            $(".Netzwerke").text(data.Netzwerke);
            $(".Netzwerkdetail").text(data.Netzwerkdetail);
            $(".BEW_NNAME").text(data.BEW_NNAME);
            $(".NL").text(data.NL);
            $(".Id").text(data.Id);


        }
    }
</script>




<script>
    function exportToPDF() {
        var doc = new jsPDF();
        var dataGrid = $("#gridContainer").dxDataGrid("instance");
        DevExpress.pdfExporter.exportDataGrid({
            jsPDFDocument: doc,
            component: dataGrid
        }).then(function () {
            doc.save("Customers.pdf");
        });
    }
</script>

<script>
    function neu(t) {
        return e._executeClickAction(t)
    }

</script>
<script>
    function popupn() {
        window.open("c:/apache/htdocs/temp/test.html");
    }
</script>



